import Head from "next/head";
import Image from "next/image";
import { NavBar } from "~/components";

import { api } from "~/utils/api";
import type { Conversation } from "@prisma/client";
import type {
  GetServerSideProps,
  InferGetServerSidePropsType,
  NextPage,
} from "next";
import { prisma } from "~/server/db";

import { useState } from "react";
import React from "react";
import { useRouter } from "next/router";

import { LuSend } from "react-icons/lu";

export const getServerSideProps: GetServerSideProps<{
  conversations: Conversation[];
}> = async function () {
  const conversations = await prisma.conversation.findMany();
  return {
    props: {
      conversations: JSON.parse(
        JSON.stringify(conversations),
      ) as Conversation[],
    },
  };
};

const Home: NextPage<
  InferGetServerSidePropsType<typeof getServerSideProps>
> = ({ conversations }) => {
  const [promptInput, setpromptInput] = useState("");
  const [disable, setDisable] = useState(false);
  const router = useRouter();

  const createConv = api.conversation.create.useMutation();
  const createMsg = api.message.create.useMutation();

  async function onSubmit(event: React.SyntheticEvent) {
    event.preventDefault();
    setDisable(true);

    const newConv = await createConv.mutateAsync({ name: promptInput });
    await createMsg.mutateAsync({
      idConv: newConv.id,
      texte: promptInput,
      username: "anonycat",
    });

    const response = await fetch("/api/generate", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ ask: promptInput }),
    });

    const data = await response.json();
    if (response.status !== 200) {
      throw (
        data.error || new Error(`Request failed with status ${response.status}`)
      );
    }

    await createMsg.mutateAsync({
      idConv: newConv.id,
      texte: data.result,
      username: "CHAT",
    });
    setpromptInput("");
    await router.push(`/conversations/${newConv.id}`);
  }

  return (
    <>
      <Head>
        <title>CHAT CPT</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main  className={`flex min-h-screen flex-col items-center justify-center bg-bg-100 pl-[300px] text-bg-900 ${disable && "cursor-wait"}`}>
        <section className="flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          {/*<div className="bg-black px-16 py-7 rounded-lg">
            <Image src={"/logo.png"} width={500} height={500} alt="Chat CPT" />
          </div>*/}

          {<h1 className="text-5xl font-extrabold tracking-tight sm:text-[5rem]">
            CHAT <span className="text-logo-800">CPT</span>
          </h1>}
        </section>
        <form
          // eslint-disable-next-line @typescript-eslint/no-misused-promises
          onSubmit={(e) => onSubmit(e)}
          className="absolute bottom-0 left-0 flex w-full justify-center gap-2 bg-bg-900 p-5 pl-[300px]"
        >
          <input
            className="w-[400px] rounded-lg px-3 py-2"
            value={promptInput}
            placeholder="Quels sont tes véritables désires ?"
            onChange={(e) => setpromptInput(e.target.value)}
            disabled={disable}
          />
          <button type="submit" className="text-3xl text-white">
            {" "}
            <LuSend />{" "}
          </button>
        </form>
        <NavBar conv={conversations} />
      </main>
    </>
  );
};

export default Home;
